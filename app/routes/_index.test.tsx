import { fireEvent, render, screen, waitFor } from "@testing-library/react";
import { beforeEach, describe, expect, it, vi } from "vitest";
import Index from "./_index";

// „Ç´„Çπ„Çø„É†„Éï„ÉÉ„ÇØ„ÅÆ„É¢„ÉÉ„ÇØ
vi.mock("../presentation/hooks/useAudio", () => ({
  useAudio: vi.fn(() => ({
    audioFile: null,
    isPlaying: false,
    isLoading: false,
    error: null,
    currentTime: 0,
    duration: 0,
    volume: 1.0,
    audioRepository: null,
    setAudioFile: vi.fn(),
    play: vi.fn(),
    pause: vi.fn(),
    stop: vi.fn(),
    setVolume: vi.fn(),
    setCurrentTime: vi.fn(),
    clearError: vi.fn(),
  })),
}));

vi.mock("../presentation/hooks/useFileUpload", () => ({
  useFileUpload: vi.fn(() => ({
    isUploading: false,
    uploadProgress: 0,
    uploadAudioFile: vi.fn(),
    uploadImageFile: vi.fn(),
    supportedFormats: {
      audio: ["audio/mp3", "audio/wav"],
      image: ["image/jpeg", "image/png"],
    },
  })),
}));

vi.mock("../presentation/hooks/useVisualizer", () => ({
  useVisualizer: vi.fn(() => ({
    config: {
      modes: [
        {
          id: "bars",
          nameJa: "„Éê„Éº",
          descriptionJa: "Âë®Ê≥¢Êï∞„Éê„ÉºË°®Á§∫",
          icon: "üìä",
          enabled: true,
        },
        {
          id: "circles",
          nameJa: "„Çµ„Éº„ÇØ„É´",
          descriptionJa: "ÂÜÜÂΩ¢Ë°®Á§∫",
          icon: "‚≠ï",
          enabled: false,
        },
      ],
      sensitivity: 1.0,
    },
    isAnimating: false,
    error: null,
    toggleMode: vi.fn(),
    updateSensitivity: vi.fn(),
    startAnimation: vi.fn(),
    clearError: vi.fn(),
  })),
}));

vi.mock("../presentation/components/ui/Toast", () => ({
  useToast: vi.fn(() => ({
    toasts: [],
    success: vi.fn(),
    error: vi.fn(),
  })),
  ToastContainer: vi.fn(() => <div data-testid="toast-container" />),
}));

// „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„É¢„ÉÉ„ÇØ
vi.mock("../presentation/components/VisualizerCanvas", () => ({
  VisualizerCanvas: vi.fn(({ hasAudioFile, className }) => (
    <div data-testid="visualizer-canvas" className={className}>
      {hasAudioFile ? "„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº" : "„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº"}
    </div>
  )),
}));

vi.mock("../presentation/components/FileUploadArea", () => ({
  FileUploadArea: vi.fn(({ type, onFileSelect }) => (
    <div data-testid={`file-upload-${type}`}>
      <button onClick={() => onFileSelect(new File(["test"], "test.mp3"))}>
        {type === "audio" ? "Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû" : "ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû"}
      </button>
    </div>
  )),
}));

vi.mock("../presentation/components/AudioControls", () => ({
  AudioControls: vi.fn(({ isPlaying, canPlay }) => (
    <div data-testid="audio-controls">
      <button disabled={!canPlay}>
        {isPlaying ? "‚è∏Ô∏è" : "‚ñ∂Ô∏è"}
      </button>
    </div>
  )),
}));

describe("Index", () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe("Âü∫Êú¨Ë°®Á§∫", () => {
    it("„Éò„ÉÉ„ÉÄ„Éº„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã", () => {
      render(<Index />);

      expect(screen.getByText("üéµ „Ç™„Éº„Éá„Ç£„Ç™„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº")).toBeInTheDocument();
      expect(screen.getByText("Èü≥Ê•Ω„ÇíÁæé„Åó„ÅèË¶ñË¶öÂåñ„Åó„ÄÅÊñ∞„Åó„ÅÑÈü≥Ê•Ω‰ΩìÈ®ì„Çí„ÅäÊ•Ω„Åó„Åø„Åè„Å†„Åï„ÅÑ")).toBeInTheDocument();
    });

    it("„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº„Ç≠„É£„É≥„Éê„Çπ„ÇíË°®Á§∫„Åô„Çã", () => {
      render(<Index />);

      expect(screen.getByTestId("visualizer-canvas")).toBeInTheDocument();
    });

    it("„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É™„Ç¢„ÇíË°®Á§∫„Åô„Çã", () => {
      render(<Index />);

      expect(screen.getByTestId("file-upload-audio")).toBeInTheDocument();
      expect(screen.getByTestId("file-upload-image")).toBeInTheDocument();
    });

    it("„Ç™„Éº„Éá„Ç£„Ç™„Ç≥„É≥„Éà„É≠„Éº„É´„ÇíË°®Á§∫„Åô„Çã", () => {
      render(<Index />);

      expect(screen.getByTestId("audio-controls")).toBeInTheDocument();
    });

    it("„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„ÉºË®≠ÂÆö„ÇíË°®Á§∫„Åô„Çã", () => {
      render(<Index />);

      expect(screen.getByText("Ë°®Á§∫„É¢„Éº„Éâ")).toBeInTheDocument();
      expect(screen.getByText("ÊÑüÂ∫¶Ë™øÊï¥")).toBeInTheDocument();
      expect(screen.getByText("„Éê„Éº")).toBeInTheDocument();
      expect(screen.getByText("„Çµ„Éº„ÇØ„É´")).toBeInTheDocument();
    });
  });

  describe("„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº„ÅÆÁä∂ÊÖã", () => {
    it("Èü≥Â£∞„Éï„Ç°„Ç§„É´„Åå„Å™„ÅÑÂ†¥Âêà„ÄÅ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº„ÇíË°®Á§∫„Åô„Çã", () => {
      render(<Index />);

      expect(screen.getByText("„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº")).toBeInTheDocument();
    });

    it("Èü≥Â£∞„Éï„Ç°„Ç§„É´„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅ„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº„ÇíË°®Á§∫„Åô„Çã", () => {
      const { useAudio } = require("../presentation/hooks/useAudio");
      useAudio.mockReturnValue({
        audioFile: { name: "test.mp3" },
        isPlaying: false,
        isLoading: false,
        error: null,
        currentTime: 0,
        duration: 0,
        volume: 1.0,
        audioRepository: null,
        setAudioFile: vi.fn(),
        play: vi.fn(),
        pause: vi.fn(),
        stop: vi.fn(),
        setVolume: vi.fn(),
        setCurrentTime: vi.fn(),
        clearError: vi.fn(),
      });

      render(<Index />);

      expect(screen.getByText("„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº")).toBeInTheDocument();
    });
  });

  describe("„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ", () => {
    it("Èü≥Â£∞„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éú„Çø„É≥„Åå„ÇØ„É™„ÉÉ„ÇØÂèØËÉΩ", () => {
      render(<Index />);

      const audioButton = screen.getByText("Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû");
      expect(audioButton).toBeInTheDocument();
      expect(audioButton).not.toBeDisabled();
    });

    it("ÁîªÂÉè„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éú„Çø„É≥„Åå„ÇØ„É™„ÉÉ„ÇØÂèØËÉΩ", () => {
      render(<Index />);

      const imageButton = screen.getByText("ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû");
      expect(imageButton).toBeInTheDocument();
      expect(imageButton).not.toBeDisabled();
    });

    it("Èü≥Â£∞„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊôÇ„Å´„Éè„É≥„Éâ„É©„Éº„ÅåÂëº„Å∞„Çå„Çã", async () => {
      const mockUploadAudioFile = vi.fn();
      const mockSetAudioFile = vi.fn();
      const mockSuccess = vi.fn();

      const { useFileUpload } = require("../presentation/hooks/useFileUpload");
      const { useAudio } = require("../presentation/hooks/useAudio");
      const { useToast } = require("../presentation/components/ui/Toast");

      useFileUpload.mockReturnValue({
        isUploading: false,
        uploadProgress: 0,
        uploadAudioFile: mockUploadAudioFile,
        uploadImageFile: vi.fn(),
        supportedFormats: {
          audio: ["audio/mp3", "audio/wav"],
          image: ["image/jpeg", "image/png"],
        },
      });

      useAudio.mockReturnValue({
        audioFile: null,
        isPlaying: false,
        isLoading: false,
        error: null,
        currentTime: 0,
        duration: 0,
        volume: 1.0,
        audioRepository: null,
        setAudioFile: mockSetAudioFile,
        play: vi.fn(),
        pause: vi.fn(),
        stop: vi.fn(),
        setVolume: vi.fn(),
        setCurrentTime: vi.fn(),
        clearError: vi.fn(),
      });

      useToast.mockReturnValue({
        toasts: [],
        success: mockSuccess,
        error: vi.fn(),
      });

      mockUploadAudioFile.mockResolvedValue({ name: "test.mp3" });

      render(<Index />);

      const audioButton = screen.getByText("Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû");
      fireEvent.click(audioButton);

      await waitFor(() => {
        expect(mockUploadAudioFile).toHaveBeenCalled();
        expect(mockSetAudioFile).toHaveBeenCalled();
        expect(mockSuccess).toHaveBeenCalled();
      });
    });
  });

  describe("„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº„É¢„Éº„Éâ", () => {
    it("„É¢„Éº„Éâ„ÅÆÂàá„ÇäÊõø„Åà„ÅåÂèØËÉΩ", () => {
      const mockToggleMode = vi.fn();
      const mockSuccess = vi.fn();

      const { useVisualizer } = require("../presentation/hooks/useVisualizer");
      const { useToast } = require("../presentation/components/ui/Toast");

      useVisualizer.mockReturnValue({
        config: {
          modes: [
            {
              id: "bars",
              nameJa: "„Éê„Éº",
              descriptionJa: "Âë®Ê≥¢Êï∞„Éê„ÉºË°®Á§∫",
              icon: "üìä",
              enabled: true,
            },
            {
              id: "circles",
              nameJa: "„Çµ„Éº„ÇØ„É´",
              descriptionJa: "ÂÜÜÂΩ¢Ë°®Á§∫",
              icon: "‚≠ï",
              enabled: false,
            },
          ],
          sensitivity: 1.0,
        },
        isAnimating: false,
        error: null,
        toggleMode: mockToggleMode,
        updateSensitivity: vi.fn(),
        startAnimation: vi.fn(),
        clearError: vi.fn(),
      });

      useToast.mockReturnValue({
        toasts: [],
        success: mockSuccess,
        error: vi.fn(),
      });

      render(<Index />);

      const modeCheckbox = screen.getByLabelText("„Çµ„Éº„ÇØ„É´ „É¢„Éº„Éâ„ÇíÂàá„ÇäÊõø„Åà");
      fireEvent.click(modeCheckbox);

      expect(mockToggleMode).toHaveBeenCalledWith("circles");
      expect(mockSuccess).toHaveBeenCalled();
    });
  });

  describe("ÊÑüÂ∫¶Ë™øÊï¥", () => {
    it("ÊÑüÂ∫¶„Çπ„É©„Ç§„ÉÄ„Éº„ÅåÊ©üËÉΩ„Åô„Çã", () => {
      const mockUpdateSensitivity = vi.fn();

      const { useVisualizer } = require("../presentation/hooks/useVisualizer");

      useVisualizer.mockReturnValue({
        config: {
          modes: [
            {
              id: "bars",
              nameJa: "„Éê„Éº",
              descriptionJa: "Âë®Ê≥¢Êï∞„Éê„ÉºË°®Á§∫",
              icon: "üìä",
              enabled: true,
            },
          ],
          sensitivity: 1.0,
        },
        isAnimating: false,
        error: null,
        toggleMode: vi.fn(),
        updateSensitivity: mockUpdateSensitivity,
        startAnimation: vi.fn(),
        clearError: vi.fn(),
      });

      render(<Index />);

      const sensitivitySlider = screen.getByRole("slider");
      fireEvent.change(sensitivitySlider, { target: { value: "2.0" } });

      expect(mockUpdateSensitivity).toHaveBeenCalledWith(2.0);
    });
  });

  describe("„Ç®„É©„ÉºË°®Á§∫", () => {
    it("„Ç™„Éº„Éá„Ç£„Ç™„Ç®„É©„Éº„ÇíË°®Á§∫„Åô„Çã", () => {
      const { useAudio } = require("../presentation/hooks/useAudio");

      useAudio.mockReturnValue({
        audioFile: null,
        isPlaying: false,
        isLoading: false,
        error: "„Ç™„Éº„Éá„Ç£„Ç™„Ç®„É©„Éº",
        currentTime: 0,
        duration: 0,
        volume: 1.0,
        audioRepository: null,
        setAudioFile: vi.fn(),
        play: vi.fn(),
        pause: vi.fn(),
        stop: vi.fn(),
        setVolume: vi.fn(),
        setCurrentTime: vi.fn(),
        clearError: vi.fn(),
      });

      render(<Index />);

      expect(screen.getByText("„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")).toBeInTheDocument();
      expect(screen.getByText("„Ç™„Éº„Éá„Ç£„Ç™„Ç®„É©„Éº")).toBeInTheDocument();
    });

    it("„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº„Ç®„É©„Éº„ÇíË°®Á§∫„Åô„Çã", () => {
      const { useVisualizer } = require("../presentation/hooks/useVisualizer");

      useVisualizer.mockReturnValue({
        config: {
          modes: [],
          sensitivity: 1.0,
        },
        isAnimating: false,
        error: "„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº„Ç®„É©„Éº",
        toggleMode: vi.fn(),
        updateSensitivity: vi.fn(),
        startAnimation: vi.fn(),
        clearError: vi.fn(),
      });

      render(<Index />);

      expect(screen.getByText("„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")).toBeInTheDocument();
      expect(screen.getByText("„Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº„Ç®„É©„Éº")).toBeInTheDocument();
    });
  });

  describe("ÁèæÂú®„ÅÆ„Éï„Ç°„Ç§„É´ÊÉÖÂ†±", () => {
    it("Èü≥Â£∞„Éï„Ç°„Ç§„É´„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅ„Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíË°®Á§∫„Åô„Çã", () => {
      const { useAudio } = require("../presentation/hooks/useAudio");

      useAudio.mockReturnValue({
        audioFile: { name: "test.mp3" },
        isPlaying: false,
        isLoading: false,
        error: null,
        currentTime: 0,
        duration: 0,
        volume: 1.0,
        audioRepository: null,
        setAudioFile: vi.fn(),
        play: vi.fn(),
        pause: vi.fn(),
        stop: vi.fn(),
        setVolume: vi.fn(),
        setCurrentTime: vi.fn(),
        clearError: vi.fn(),
      });

      render(<Index />);

      expect(screen.getByText("ÂÜçÁîü‰∏≠")).toBeInTheDocument();
      expect(screen.getByText("test.mp3")).toBeInTheDocument();
    });

    it("Èü≥Â£∞„Éï„Ç°„Ç§„É´„Åå„Å™„ÅÑÂ†¥Âêà„ÄÅ„Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíË°®Á§∫„Åó„Å™„ÅÑ", () => {
      render(<Index />);

      expect(screen.queryByText("ÂÜçÁîü‰∏≠")).not.toBeInTheDocument();
    });
  });

  describe("„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£", () => {
    it("ÈÅ©Âàá„Å™„Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØHTML„Çí‰ΩøÁî®„Åô„Çã", () => {
      render(<Index />);

      expect(screen.getByRole("banner")).toBeInTheDocument(); // header
      expect(screen.getByRole("main")).toBeInTheDocument(); // main
      expect(screen.getByRole("contentinfo")).toBeInTheDocument(); // footer
    });

    it("„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„Å´ÈÅ©Âàá„Å™„É©„Éô„É´„Åå„ÅÇ„Çã", () => {
      render(<Index />);

      const checkbox = screen.getByLabelText("„Çµ„Éº„ÇØ„É´ „É¢„Éº„Éâ„ÇíÂàá„ÇäÊõø„Åà");
      expect(checkbox).toBeInTheDocument();
      expect(checkbox).toHaveAttribute("type", "checkbox");
    });
  });

  describe("„É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥", () => {
    it("„É¢„Éê„Ç§„É´„Éï„Ç°„Éº„Çπ„Éà„ÅÆ„ÇØ„É©„Çπ„Çí‰ΩøÁî®„Åô„Çã", () => {
      render(<Index />);

      const header = screen.getByRole("banner");
      expect(header).toHaveClass("p-6", "pb-8");

      const main = screen.getByRole("main");
      expect(main).toHaveClass("px-4", "md:px-6");
    });
  });
});
